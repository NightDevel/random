. Exhaustively search all the answers do it
	before starting the problem

. Read the data temporaryily for faster io

. Floats cannot be represented as we like, i.e 1.45 is stored as 1.450005 
	which gives inpredictable results, then use double

. Use lld for printing long long int

. If algo is right check for long long of variables
   Use long long instead of long long int which is weird
	

.  Check for the boundary conditions all boundary conditions in the 
	while or if statements, RAMA n Friends problem

. precompute results and do binary search

. while reading data use the following in python
  faster reading input 
    inp = sys.stdin.readlines()
    T = int(inp[0].strip())
    for i in range(1, T+1):
        N, K = map(int, inp[i].strip().split())

- if a is an interger and p is prime and (a % p != 0)
   a^p(mod p) = a (mod p)
   a^(p-1) % p = 1 % p

   a^n % p =>

    assume n > p
    and n = k(p-1) + l
    a^n % p = a ^ (k(p-1)). a^l % p
            => a^(k(p-1))%p  = (a^(p-1))k % p = 1
            = 1 . a ^ l % p
            = a ^(n%(p-1)) % p
